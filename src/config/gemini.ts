import * as dotenv from "dotenv";
dotenv.config();

import { GoogleGenerativeAI } from "@google/generative-ai";

const apiKey = process.env.GEMINI_API_KEY!;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-2.0-flash",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};

export const GenerateCourseLayout = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {
          text: "Generate a detailed course outline in JSON format based on the following specifications:\n\n- Category: [Programming]\n- Topic: [Python]\n- Additional Description: [Learn Python from scratch to become a ML Engineer]\n- Difficulty Level: [Advance]\n- Total Duration: [More than 3 hours]\n- Include Videos: [yes]\n- Number of Chapters: [20]",
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```json\n{\n  "courseTitle": "Python for Machine Learning Engineers: From Zero to Hero",\n  "category": "Programming",\n  "topic": "Python",\n  "description": "Learn Python from scratch to become a Machine Learning Engineer. This advanced course covers fundamental Python concepts and progresses to advanced topics essential for building robust and scalable machine learning models and applications.",\n  "difficulty": "Advanced",\n  "duration": "More than 3 hours",\n  "includesVideos": true,\n  "numberOfChapters": 20,\n  "courseOutline": [\n    {\n      "chapterNumber": 1,\n      "chapterTitle": "Python Setup and Environment Configuration",\n      "description": "Setting up Python, Anaconda, virtual environments, and IDE configuration for efficient machine learning development.",\n      "duration": "15 minutes",\n      "topicsCovered": [\n        "Installing Python (Anaconda Distribution)",\n        "Creating and managing virtual environments",\n        "IDE setup (VS Code, PyCharm)",\n        "Jupyter Notebook introduction and usage",\n        "Package management with pip and conda"\n      ],\n      "videoLink": "https://example.com/video/python-setup-1"\n    },\n    {\n      "chapterNumber": 2,\n      "chapterTitle": "Python Fundamentals Revisited: Data Types and Structures",\n      "description": "A rapid review of essential Python data types and structures, focusing on efficiency and best practices for machine learning.",\n      "duration": "20 minutes",\n      "topicsCovered": [\n        "Numeric types (int, float, complex)",\n        "Strings and string manipulation",\n        "Lists, tuples, dictionaries, and sets: advanced usage",\n        "List comprehensions and generator expressions",\n        "Memory management and efficiency considerations"\n      ],\n      "videoLink": "https://example.com/video/python-fundamentals-1"\n    },\n    {\n      "chapterNumber": 3,\n      "chapterTitle": "Functions and Modules: Building Reusable Code",\n      "description": "Advanced function techniques, including decorators, closures, and module creation for building modular and maintainable ML code.",\n      "duration": "20 minutes",\n      "topicsCovered": [\n        "Function definitions, arguments, and return values",\n        "Lambda functions and higher-order functions",\n        "Decorators for code enhancement and logging",\n        "Closures and non-local variables",\n        "Creating and using custom modules and packages"\n      ],\n      "videoLink": "https://example.com/video/python-functions-1"\n    },\n    {\n      "chapterNumber": 4,\n      "chapterTitle": "Object-Oriented Programming (OOP) in Python",\n      "description": "Deep dive into OOP principles, including inheritance, polymorphism, and encapsulation, with practical examples for ML project organization.",\n      "duration": "25 minutes",\n      "topicsCovered": [\n        "Classes and objects: creating and using them",\n        "Inheritance and polymorphism: building hierarchies",\n        "Encapsulation and data hiding",\n        "Abstract classes and interfaces",\n        "Design patterns for ML (e.g., Strategy, Factory)"\n      ],\n      "videoLink": "https://example.com/video/python-oop-1"\n    },\n    {\n      "chapterNumber": 5,\n      "chapterTitle": "File I/O and Data Serialization",\n      "description": "Reading and writing data to files, including CSV, JSON, and other formats, with a focus on efficient data handling for large datasets.",\n      "duration": "15 minutes",\n      "topicsCovered": [\n        "Reading and writing text files",\n        "Working with CSV files using the `csv` module",\n        "JSON serialization and deserialization",\n        "Handling binary data",\n        "Efficient data streaming for large datasets"\n      ],\n      "videoLink": "https://example.com/video/python-fileio-1"\n    },\n    {\n      "chapterNumber": 6,\n      "chapterTitle": "Error Handling and Debugging",\n      "description": "Robust error handling techniques and debugging strategies to ensure reliable and stable ML applications.",\n      "duration": "15 minutes",\n      "topicsCovered": [\n        "Try-except blocks and exception handling",\n        "Raising custom exceptions",\n        "Debugging with `pdb` and IDE debuggers",\n        "Logging and monitoring",\n        "Unit testing with `unittest`"\n      ],\n      "videoLink": "https://example.com/video/python-errors-1"\n    },\n    {\n      "chapterNumber": 7,\n      "chapterTitle": "Working with NumPy: Numerical Computing",\n      "description": "Advanced NumPy concepts, including broadcasting, vectorized operations, and linear algebra, essential for numerical computation in ML.",\n      "duration": "25 minutes",\n      "topicsCovered": [\n        "NumPy arrays: creation, indexing, and slicing",\n        "Broadcasting and vectorized operations",\n        "Linear algebra operations (matrix multiplication, decomposition)",\n        "Random number generation",\n        "Performance optimization with NumPy"\n      ],\n      "videoLink": "https://example.com/video/python-numpy-1"\n    },\n    {\n      "chapterNumber": 8,\n      "chapterTitle": "Pandas: Data Analysis and Manipulation",\n      "description": "Mastering Pandas DataFrames for data cleaning, transformation, and analysis, crucial for preparing data for ML models.",\n      "duration": "30 minutes",\n      "topicsCovered": [\n        "DataFrames: creation, indexing, and selection",\n        "Data cleaning and preprocessing (handling missing values, outliers)",\n        "Data transformation (grouping, pivoting, merging)",\n        "Time series analysis",\n        "Integration with other libraries (NumPy, scikit-learn)"\n      ],\n      "videoLink": "https://example.com/video/python-pandas-1"\n    },\n    {\n      "chapterNumber": 9,\n      "chapterTitle": "Matplotlib and Seaborn: Data Visualization",\n      "description": "Creating informative and visually appealing plots using Matplotlib and Seaborn to understand and communicate insights from data.",\n      "duration": "20 minutes",\n      "topicsCovered": [\n        "Basic plotting with Matplotlib",\n        "Customizing plots (labels, titles, legends)",\n        "Statistical visualizations with Seaborn",\n        "Interactive plots with Plotly or Bokeh",\n        "Choosing the right visualization for different data types"\n      ],\n      "videoLink": "https://example.com/video/python-vis-1"\n    },\n    {\n      "chapterNumber": 10,\n      "chapterTitle": "Scikit-learn: Machine Learning Algorithms",\n      "description": "Implementing and evaluating various machine learning algorithms using scikit-learn, including classification, regression, and clustering.",\n      "duration": "30 minutes",\n      "topicsCovered": [\n        "Supervised learning (classification, regression)",\n        "Unsupervised learning (clustering, dimensionality reduction)",\n        "Model selection and evaluation (cross-validation, metrics)",\n        "Pipeline construction",\n        "Hyperparameter tuning"\n      ],\n      "videoLink": "https://example.com/video/python-sklearn-1"\n    },\n    {\n      "chapterNumber": 11,\n      "chapterTitle": "Deep Learning with TensorFlow and Keras",\n      "description": "Building and training deep learning models using TensorFlow and Keras, including CNNs, RNNs, and LSTMs.",\n      "duration": "35 minutes",\n      "topicsCovered": [\n        "TensorFlow basics: tensors, operations, graphs",\n        "Keras API: building sequential and functional models",\n        "Convolutional Neural Networks (CNNs) for image recognition",\n        "Recurrent Neural Networks (RNNs) and LSTMs for sequence modeling",\n        "Training and evaluating deep learning models"\n      ],\n      "videoLink": "https://example.com/video/python-tf-1"\n    },\n    {\n      "chapterNumber": 12,\n      "chapterTitle": "Natural Language Processing (NLP) with NLTK and SpaCy",\n      "description": "Processing and analyzing text data using NLTK and SpaCy for tasks such as sentiment analysis, text classification, and named entity recognition.",\n      "duration": "25 minutes",\n      "topicsCovered": [\n        "Text preprocessing (tokenization, stemming, lemmatization)",\n        "Sentiment analysis",\n        "Text classification",\n        "Named entity recognition (NER)",\n        "Word embeddings (Word2Vec, GloVe)"\n      ],\n      "videoLink": "https://example.com/video/python-nlp-1"\n    },\n    {\n      "chapterNumber": 13,\n      "chapterTitle": "Computer Vision with OpenCV",\n      "description": "Working with images and videos using OpenCV for tasks such as object detection, image segmentation, and face recognition.",\n      "duration": "25 minutes",\n      "topicsCovered": [\n        "Image loading, processing, and display",\n        "Object detection (Haar cascades, YOLO, SSD)",\n        "Image segmentation",\n        "Feature extraction and matching",\n        "Face recognition"\n      ],\n      "videoLink": "https://example.com/video/python-cv-1"\n    },\n    {\n      "chapterNumber": 14,\n      "chapterTitle": "Web Scraping with Beautiful Soup and Scrapy",\n      "description": "Extracting data from websites using Beautiful Soup and Scrapy for building datasets and automating data collection.",\n      "duration": "20 minutes",\n      "topicsCovered": [\n        "HTML parsing with Beautiful Soup",\n        "Scrapy framework: building web crawlers",\n        "Handling dynamic content with Selenium",\n        "Data extraction and storage",\n        "Ethical considerations and best practices"\n      ],\n      "videoLink": "https://example.com/video/python-webscrape-1"\n    },\n    {\n      "chapterNumber": 15,\n      "chapterTitle": "APIs and Web Services",\n      "description": "Interacting with APIs and web services using the `requests` library for data retrieval and integration.",\n      "duration": "20 minutes",\n      "topicsCovered": [\n        "Making HTTP requests with `requests`",\n        "Working with JSON APIs",\n        "Authentication and authorization",\n        "Rate limiting and error handling",\n        "Building RESTful APIs with Flask or FastAPI (brief introduction)"\n      ],\n      "videoLink": "https://example.com/video/python-apis-1"\n    },\n    {\n      "chapterNumber": 16,\n      "chapterTitle": "Data Pipelines with Apache Airflow",\n      "description": "Designing and implementing data pipelines using Apache Airflow for automating data processing and model training workflows.",\n      "duration": "30 minutes",\n      "topicsCovered": [\n        "Airflow concepts: DAGs, tasks, operators",\n        "Setting up and configuring Airflow",\n        "Building and scheduling data pipelines",\n        "Monitoring and troubleshooting",\n        "Integration with other services (AWS, GCP, Azure)"\n      ],\n      "videoLink": "https://example.com/video/python-airflow-1"\n    },\n    {\n      "chapterNumber": 17,\n      "chapterTitle": "Cloud Computing for Machine Learning (AWS, GCP, Azure)",\n      "description": "Leveraging cloud computing platforms such as AWS, GCP, and Azure for deploying and scaling ML models and applications.",\n      "duration": "30 minutes",\n      "topicsCovered": [\n        "Introduction to cloud computing concepts",\n        "AWS (Amazon SageMaker, EC2, S3)",\n        "GCP (Google Cloud AI Platform, Compute Engine, Cloud Storage)",\n        "Azure (Azure Machine Learning, Virtual Machines, Blob Storage)",\n        "Deploying and scaling ML models in the cloud"\n      ],\n      "videoLink": "https://example.com/video/python-cloud-1"\n    },\n    {\n      "chapterNumber": 18,\n      "chapterTitle": "Model Deployment and Serving",\n      "description": "Deploying trained ML models using frameworks such as Flask, FastAPI, and Docker for real-time prediction serving.",\n      "duration": "25 minutes",\n      "topicsCovered": [\n        "Building RESTful APIs with Flask or FastAPI",\n        "Containerization with Docker",\n        "Model serving with TensorFlow Serving or TorchServe",\n        "Load balancing and scaling",\n        "Monitoring and logging"\n      ],\n      "videoLink": "https://example.com/video/python-deploy-1"\n    },\n    {\n      "chapterNumber": 19,\n      "chapterTitle": "Ethical Considerations in Machine Learning",\n      "description": "Addressing ethical concerns related to bias, fairness, and privacy in machine learning models and applications.",\n      "duration": "15 minutes",\n      "topicsCovered": [\n        "Bias in data and algorithms",\n        "Fairness metrics and mitigation techniques",\n        "Privacy-preserving techniques (differential privacy, federated learning)",\n        "Explainable AI (XAI)",\n        "Responsible AI development and deployment"\n      ],\n      "videoLink": "https://example.com/video/python-ethics-1"\n    },\n    {\n      "chapterNumber": 20,\n      "chapterTitle": "Advanced Python Libraries and Techniques",\n      "description": "Exploring advanced Python libraries and techniques for specialized ML tasks, such as graph databases, time series analysis, and optimization.",\n      "duration": "20 minutes",\n      "topicsCovered": [\n        "Graph databases with NetworkX or Neo4j",\n        "Advanced time series analysis with Statsmodels or Prophet",\n        "Optimization with SciPy or Pyomo",\n        "Parallel processing with multiprocessing or Dask",\n        "Advanced data structures (e.g., Bloom filters, Trie)"\n      ],\n      "videoLink": "https://example.com/video/python-advanced-1"\n    }\n  ]\n}\n```',
        },
      ],
    },
    {
      role: "user",
      parts: [
        {
          text: "Generate a detailed course outline in JSON format based on the following specifications. Make sure Enough details is provided for each and every topics that is included in the Course:\n\nCategory: [Programming]\n\nTopic: [Python]\n\nAdditional Description: [Learn Python from scratch to become a ML Engineer]\n\nDifficulty Level: [Beginner]\n\nTotal Duration: [More than 3 hours]\n\nInclude Videos: [yes]\n\nNumber of Chapters: [20]",
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```json\n{\n  "courseTitle": "Python for Machine Learning: A Beginner\'s Guide",\n  "category": "Programming",\n  "topic": "Python",\n  "description": "A comprehensive introduction to Python programming, tailored for aspiring Machine Learning Engineers. This course starts with the fundamentals and builds a strong foundation for future learning in Machine Learning.",\n  "difficulty": "Beginner",\n  "duration": "More than 3 hours",\n  "includesVideos": true,\n  "numberOfChapters": 20,\n  "courseOutline": [\n    {\n      "chapterNumber": 1,\n      "chapterTitle": "Introduction to Python and its Applications",\n      "description": "An overview of Python, its history, features, and diverse applications, including its pivotal role in Machine Learning.",\n      "duration": "10 minutes",\n      "topicsCovered": [\n        "What is Python?",\n        "History and Evolution of Python",\n        "Why Python for Machine Learning?",\n        "Python\'s Strengths and Weaknesses",\n        "Setting Expectations for the Course"\n      ],\n      "videoLink": "https://example.com/video/intro-python"\n    },\n    {\n      "chapterNumber": 2,\n      "chapterTitle": "Setting up Your Python Environment",\n      "description": "Guidance on installing Python and setting up a development environment using Anaconda and Jupyter Notebook.",\n      "duration": "15 minutes",\n      "topicsCovered": [\n        "Installing Python (Anaconda Distribution Recommended)",\n        "Understanding Anaconda Navigator",\n        "Creating and Managing Virtual Environments",\n        "Introduction to Jupyter Notebooks",\n        "Basic Jupyter Notebook Operations (Cells, Saving, etc.)"\n      ],\n      "videoLink": "https://example.com/video/setup-env"\n    },\n    {\n      "chapterNumber": 3,\n      "chapterTitle": "Python Syntax and Basic Data Types",\n      "description": "Understanding fundamental Python syntax, including variables, data types (integers, floats, strings, booleans), and basic operations.",\n      "duration": "20 minutes",\n      "topicsCovered": [\n        "Variables and Assignment",\n        "Integers, Floats, and Basic Arithmetic Operations",\n        "Strings: Definition, Concatenation, and Basic Methods",\n        "Booleans: True and False Values",\n        "Comments in Python"\n      ],\n      "videoLink": "https://example.com/video/syntax-datatypes"\n    },\n    {\n      "chapterNumber": 4,\n      "chapterTitle": "Operators in Python",\n      "description": "Exploring different types of operators in Python, including arithmetic, comparison, logical, and assignment operators.",\n      "duration": "15 minutes",\n      "topicsCovered": [\n        "Arithmetic Operators (+, -, *, /, %, //, **)",\n        "Comparison Operators (==, !=, >, <, >=, <=)",\n        "Logical Operators (and, or, not)",\n        "Assignment Operators (=, +=, -=, *=, /=, etc.)",\n        "Operator Precedence"\n      ],\n      "videoLink": "https://example.com/video/operators"\n    },\n    {\n      "chapterNumber": 5,\n      "chapterTitle": "Control Flow: If Statements",\n      "description": "Learning how to control the flow of your program using if, elif, and else statements.",\n      "duration": "20 minutes",\n      "topicsCovered": [\n        "Basic `if` Statement",\n        "The `else` Clause",\n        "Using `elif` (else if)",\n        "Nested `if` Statements",\n        "Real-world Examples"\n      ],\n      "videoLink": "https://example.com/video/if-statements"\n    },\n    {\n      "chapterNumber": 6,\n      "chapterTitle": "Control Flow: Loops (For and While)",\n      "description": "Understanding and using for and while loops to iterate over sequences and execute code repeatedly.",\n      "duration": "25 minutes",\n      "topicsCovered": [\n        "The `for` Loop: Iterating over Sequences",\n        "The `range()` Function",\n        "The `while` Loop: Conditional Execution",\n        "`break` and `continue` Statements",\n        "Nested Loops"\n      ],\n      "videoLink": "https://example.com/video/loops"\n    },\n    {\n      "chapterNumber": 7,\n      "chapterTitle": "Data Structures: Lists",\n      "description": "Introducing lists, a fundamental data structure for storing ordered collections of items.",\n      "duration": "20 minutes",\n      "topicsCovered": [\n        "Creating and Accessing Lists",\n        "List Methods (append, insert, remove, pop, etc.)",\n        "List Slicing",\n        "List Comprehensions (Introduction)",\n        "Common List Operations (len, max, min, sum)"\n      ],\n      "videoLink": "https://example.com/video/lists"\n    },\n    {\n      "chapterNumber": 8,\n      "chapterTitle": "Data Structures: Tuples",\n      "description": "Understanding tuples, an immutable data structure similar to lists.",\n      "duration": "15 minutes",\n      "topicsCovered": [\n        "Creating and Accessing Tuples",\n        "Tuple Immutability",\n        "When to Use Tuples vs. Lists",\n        "Tuple Packing and Unpacking",\n        "Basic Tuple Methods (count, index)"\n      ],\n      "videoLink": "https://example.com/video/tuples"\n    },\n    {\n      "chapterNumber": 9,\n      "chapterTitle": "Data Structures: Dictionaries",\n      "description": "Learning about dictionaries, a key-value data structure for storing and retrieving data efficiently.",\n      "duration": "25 minutes",\n      "topicsCovered": [\n        "Creating and Accessing Dictionaries",\n        "Dictionary Methods (get, keys, values, items, update, etc.)",\n        "Adding, Modifying, and Deleting Dictionary Entries",\n        "Dictionary Comprehensions (Introduction)",\n        "Using Dictionaries for Data Storage and Retrieval"\n      ],\n      "videoLink": "https://example.com/video/dictionaries"\n    },\n    {\n      "chapterNumber": 10,\n      "chapterTitle": "Data Structures: Sets",\n      "description": "Exploring sets, an unordered collection of unique elements.",\n      "duration": "15 minutes",\n      "topicsCovered": [\n        "Creating and Accessing Sets",\n        "Set Operations (union, intersection, difference, etc.)",\n        "Adding and Removing Elements from a Set",\n        "Set Comprehensions (Introduction)",\n        "When to Use Sets"\n      ],\n      "videoLink": "https://example.com/video/sets"\n    },\n    {\n      "chapterNumber": 11,\n      "chapterTitle": "Functions: Defining and Calling",\n      "description": "Learning how to define and call functions to create reusable blocks of code.",\n      "duration": "20 minutes",\n      "topicsCovered": [\n        "Defining Functions with `def`",\n        "Function Arguments (Positional, Keyword, Default)",\n        "Returning Values from a Function",\n        "Function Scope",\n        "Docstrings"\n      ],\n      "videoLink": "https://example.com/video/functions"\n    },\n    {\n      "chapterNumber": 12,\n      "chapterTitle": "Modules and Packages",\n      "description": "Understanding how to use modules and packages to organize and reuse code.",\n      "duration": "20 minutes",\n      "topicsCovered": [\n        "Importing Modules (`import`, `from ... import ...`, `as`)",\n        "Built-in Modules (math, random, datetime)",\n        "Creating Your Own Modules",\n        "Introduction to Packages",\n        "Installing Packages with `pip`"\n      ],\n      "videoLink": "https://example.com/video/modules"\n    },\n    {\n      "chapterNumber": 13,\n      "chapterTitle": "Working with Files",\n      "description": "Learning how to read and write data to files.",\n      "duration": "25 minutes",\n      "topicsCovered": [\n        "Opening and Closing Files (`open()`, `close()`)",\n        "Reading from Files (`read()`, `readline()`, `readlines()`)",\n        "Writing to Files (`write()`, `writelines()`)",\n        "File Modes (read, write, append)",\n        "Using `with` statement for Automatic File Closing"\n      ],\n      "videoLink": "https://example.com/video/files"\n    },\n    {\n      "chapterNumber": 14,\n      "chapterTitle": "Error Handling with Try-Except",\n      "description": "Implementing error handling to prevent program crashes and handle exceptions gracefully.",\n      "duration": "15 minutes",\n      "topicsCovered": [\n        "Understanding Exceptions",\n        "The `try-except` Block",\n        "Handling Specific Exceptions",\n        "The `finally` Clause",\n        "Raising Exceptions"\n      ],\n      "videoLink": "https://example.com/video/error-handling"\n    },\n    {\n      "chapterNumber": 15,\n      "chapterTitle": "Introduction to NumPy: Arrays and Basic Operations",\n      "description": "A gentle introduction to NumPy, a fundamental library for numerical computing in Python, focusing on arrays and basic operations.",\n      "duration": "30 minutes",\n      "topicsCovered": [\n        "What is NumPy?",\n        "Creating NumPy Arrays",\n        "Array Attributes (shape, dtype, size)",\n        "Array Indexing and Slicing",\n        "Basic Array Operations (+, -, *, /, etc.)"\n      ],\n      "videoLink": "https://example.com/video/numpy-intro"\n    },\n    {\n      "chapterNumber": 16,\n      "chapterTitle": "Introduction to Pandas: DataFrames",\n      "description": "An introduction to Pandas, a library for data analysis and manipulation, focusing on DataFrames.",\n      "duration": "30 minutes",\n      "topicsCovered": [\n        "What is Pandas?",\n        "Creating DataFrames from Dictionaries, Lists, and NumPy Arrays",\n        "DataFrame Attributes (index, columns, dtypes)",\n        "DataFrame Indexing and Selection",\n        "Basic DataFrame Operations (head, tail, describe, info)"\n      ],\n      "videoLink": "https://example.com/video/pandas-intro"\n    },\n    {\n      "chapterNumber": 17,\n      "chapterTitle": "Introduction to Matplotlib: Basic Plotting",\n      "description": "A basic introduction to Matplotlib, a library for creating static, interactive, and animated visualizations in Python.",\n      "duration": "20 minutes",\n      "topicsCovered": [\n        "What is Matplotlib?",\n        "Creating Basic Plots (line, scatter, bar)",\n        "Adding Labels and Titles",\n        "Customizing Plot Appearance (colors, markers, line styles)",\n        "Saving Plots to Files"\n      ],\n      "videoLink": "https://example.com/video/matplotlib-intro"\n    },\n    {\n      "chapterNumber": 18,\n      "chapterTitle": "Introduction to Scikit-learn: First Model",\n      "description": "Your first machine learning model with Scikit-learn: a simple linear regression example.",\n      "duration": "25 minutes",\n      "topicsCovered": [\n        "What is Scikit-learn?",\n        "Preparing Data for Modeling",\n        "Training a Linear Regression Model",\n        "Making Predictions",\n        "Evaluating Model Performance (Introduction)"\n      ],\n      "videoLink": "https://example.com/video/sklearn-first-model"\n    },\n    {\n      "chapterNumber": 19,\n      "chapterTitle": "Next Steps in Machine Learning",\n      "description": "Guidance on where to go next in your Machine Learning journey, including recommended resources and topics to explore.",\n      "duration": "10 minutes",\n      "topicsCovered": [\n        "Recommended Resources for Further Learning",\n        "Key Concepts to Explore (Classification, Clustering, Deep Learning)",\n        "Joining the Machine Learning Community",\n        "Building Your Portfolio"\n      ],\n      "videoLink": "https://example.com/video/next-steps"\n    },\n    {\n      "chapterNumber": 20,\n      "chapterTitle": "Project: Building a Simple Calculator",\n      "description": "A hands-on project to solidify your understanding of Python fundamentals by building a simple calculator.",\n      "duration": "30 minutes",\n      "topicsCovered": [\n        "Project Overview",\n        "Planning the Calculator\'s Functionality",\n        "Implementing the Calculator using Functions, Loops, and Conditional Statements",\n        "Testing and Debugging",\n        "Adding Features and Enhancements"\n      ],\n      "videoLink": "https://example.com/video/calculator-project"\n    }\n  ]\n}\n```',
        },
      ],
    },
    {
      role: "user",
      parts: [
        {
          text: "I am using the free tier which has RPM of 15 and 1500 per day. What should I limit in the prompt to overloading my api? For example if user wants to generate 200 chapters, that would be kind of too much right? Tell me exactly what to limit to stay under the RPM?\n",
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: 'Okay, here\'s a breakdown of how to limit your prompts and API usage to stay within your free tier limits (15 RPM and 1500 requests per day), specifically regarding generating course outlines:\n\n**Understanding the Limits**\n\n*   **RPM (Requests Per Minute):** You can make a maximum of 15 API calls within any given minute.  Exceeding this will result in rate limiting (your requests being rejected).\n*   **Daily Limit:** You have a total of 1500 requests available each day.\n\n**Key Considerations for Limiting Prompts**\n\n1.  **Chapter Generation is Expensive:** Generating even *one* detailed chapter outline can easily consume several API requests, especially if you\'re asking for descriptions, topics, and video links within each chapter. Generating 200 chapters is almost certainly *way* over your RPM *and* daily limit.\n\n2.  **Focus on Efficiency:**  Structure your prompt to get the most information with the fewest API calls.  Batch related requests whenever possible.\n\n3.  **Plan for Error Handling:** Include error handling in your code to gracefully deal with rate limits and other potential issues.  This is crucial for providing a good user experience even within the free tier.\n\n**Specific Prompt Limits and Strategies**\n\nHere\'s what you should limit and how to do it, with code examples:\n\n*   **a.  Limit the Number of Chapters:**  This is the MOST important thing to control.  Don\'t let users request an unlimited number of chapters.\n    *   **Example:** Set a maximum allowable chapter count in your UI/code.\n\n    ```python\n    MAX_CHAPTERS = 10  # Example: Limit to 10 chapters\n\n    def generate_outline(user_requested_chapters):\n      num_chapters = min(user_requested_chapters, MAX_CHAPTERS)\n      print(f"Generating outline for {num_chapters} chapters (max allowed: {MAX_CHAPTERS})")\n      # ... your API call logic here ...\n    ```\n\n*   **b.  Limit the Level of Detail:** Requesting a simpler outline consumes fewer tokens and potentially fewer API calls.\n\n    *   **Example:**  Offer different outline levels (e.g., "Basic", "Detailed", "Very Detailed") and adjust the prompt accordingly.  A "Basic" outline might just have the chapter title and a one-sentence description.  A "Detailed" outline could include topic lists and video link suggestions.  The "Very Detailed" outline is what we have been using.\n\n    ```python\n    def generate_prompt(topic, num_chapters, detail_level="Basic"):\n      if detail_level == "Basic":\n        prompt = f"Generate a course outline for {topic} with {num_chapters} chapters. Just provide the chapter title and a one-sentence description for each."\n      elif detail_level == "Detailed":\n        prompt = f"Generate a course outline for {topic} with {num_chapters} chapters. Provide the chapter title, a longer detailed description, and a list of 3-5 relevant topics for each chapter."\n      elif detail_level == "Very Detailed":\n                prompt = f"Generate a detailed course outline in JSON format based on the following specifications:\\nCategory: [Programming]\\nTopic: [{topic}]\\nAdditional Description: [Learn Python from scratch to become a ML Engineer]\\nDifficulty Level: [Beginner]\\nTotal Duration: [More than 3 hours]\\nInclude Videos: [yes]\\nNumber of Chapters: [{num_chapters}]"\n\n      return prompt\n    ```\n\n*   **c.  Implement Rate Limiting (Even with the Input Limits):** This is a safety net in case of unexpected code behavior or user input errors.  Many libraries exist to help with this.\n    *   **Example (using `time.sleep` - basic):**\n\n    ```python\n    import time\n\n    REQUESTS_PER_MINUTE = 15\n    SLEEP_TIME = 60 / REQUESTS_PER_MINUTE #Sleep time in seconds\n    api_call_count = 0\n    last_minute_start = time.time()\n\n\n    def make_api_call(prompt): #Replace this with your actual api call function\n        global api_call_count, last_minute_start\n        current_time = time.time()\n\n        if current_time - last_minute_start >= 60: #Check how long since last minute\n            api_call_count = 0\n            last_minute_start = current_time\n\n        if api_call_count >= REQUESTS_PER_MINUTE:\n            sleep_duration = 60 - (current_time - last_minute_start)  #Seconds until the next minute\n            print(f"Rate limit reached. Sleeping for {sleep_duration:.2f} seconds...")\n            time.sleep(sleep_duration) #Sleep until the next minute resets\n            api_call_count = 0\n            last_minute_start = time.time()\n\n\n        time.sleep(SLEEP_TIME)\n        api_call_count += 1\n\n        # REPLACE THIS with your actual API call\n        print(f"Making API call: {prompt}")  # Simulate API call\n        return f"Response for: {prompt}"\n    ```\n\n*   **d. Implement a queue:** Instead of generating the full course immediately, you could add sections to a queue. The queue is processed in the background, respecting your RPM. This provides a smoother user experience as they don\'t have to wait for everything immediately. This requires more complex coding.\n\n**Putting it all together (Conceptual Example):**\n\n1.  **UI:** The user selects a topic and the number of chapters (limited to, say, 10). They also select the detail level ("Basic", "Detailed").\n2.  **Code:**\n    *   Your code uses the selected options to generate a prompt (using the `generate_prompt` function example above).\n    *   You then use `make_api_call` (or your actual API call function, wrapped with rate limiting) to get the chapter outline.\n    *   Handle the API response, parse the JSON, and display the results to the user.\n3.  **Error Handling:**  If the API returns an error (e.g., rate limit exceeded), display a friendly message to the user, explaining that they need to wait before generating more content.\n\n**Key Takeaways**\n\n*   **Prioritize limiting the number of chapters.** It\'s the biggest resource hog.\n*   **Implement rate limiting in your code** (using `time.sleep` or a more robust library).\n*   **Offer different detail levels** to give users some control over API usage.\n*   **Handle errors gracefully** and provide informative messages to the user.\n\nBy carefully controlling these factors, you can effectively use the free tier and avoid overloading your API. Remember to test your code thoroughly with different settings to ensure that you stay within your limits. Good luck!\n',
        },
      ],
    },
    {
      role: "user",
      parts: [
        {
          text: "Generate a streamlined yet robust course outline in JSON format based on the following specifications:\n\nCategory: [Programming]\n\nTopic: [Python]\n\nAdditional Description: [Learn Python from scratch to become a ML Engineer]\n\nDifficulty Level: [Advance]\n\nTotal Duration: [More than 3 hours]\n\nInclude Videos: [yes]\n\nNumber of Chapters: [20]",
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```json\n{\n  "courseTitle": "Advanced Python for Machine Learning Engineers",\n  "category": "Programming",\n  "topic": "Python",\n  "description": "Master advanced Python concepts and libraries essential for building and deploying scalable machine learning solutions. Focuses on efficiency, best practices, and real-world applications.",\n  "difficulty": "Advanced",\n  "duration": "More than 3 hours",\n  "includesVideos": true,\n  "numberOfChapters": 20,\n  "courseOutline": [\n    {\n      "chapterNumber": 1,\n      "chapterTitle": "Python Optimization & Profiling",\n      "description": "Techniques for identifying and addressing performance bottlenecks in Python code. Covers profiling tools and optimization strategies.",\n      "duration": "15 minutes",\n      "topicsCovered": ["Profiling with `cProfile` and `line_profiler`", "Memory management optimization", "Cython integration", "Vectorization strategies", "Benchmarking techniques"],\n      "videoLink": "https://example.com/video/opt-prof"\n    },\n    {\n      "chapterNumber": 2,\n      "chapterTitle": "Advanced Data Structures & Algorithms",\n      "description": "Implementation and application of advanced data structures and algorithms relevant to machine learning.",\n      "duration": "20 minutes",\n      "topicsCovered": ["Heaps and priority queues", "Graph algorithms (BFS, DFS)", "Trees (balanced trees, tries)", "Dynamic programming techniques", "Bloom filters"],\n      "videoLink": "https://example.com/video/adv-ds-alg"\n    },\n    {\n      "chapterNumber": 3,\n      "chapterTitle": "Concurrency & Parallelism",\n      "description": "Utilizing threading, multiprocessing, and asynchronous programming to improve the performance of computationally intensive ML tasks.",\n      "duration": "20 minutes",\n      "topicsCovered": ["Threading vs. multiprocessing", "Asynchronous programming with `asyncio`", "Process pools and thread pools", "Global Interpreter Lock (GIL) considerations", "Distributed computing frameworks (Dask introduction)"],\n      "videoLink": "https://example.com/video/concurrency"\n    },\n    {\n      "chapterNumber": 4,\n      "chapterTitle": "Metaclasses & Dynamic Code Generation",\n      "description": "Understanding and applying metaclasses and dynamic code generation for advanced customization and flexibility in ML frameworks.",\n      "duration": "20 minutes",\n      "topicsCovered": ["Metaclass concepts and creation", "Dynamic class and object creation", "Code generation with `exec` and `eval`", "Use cases in ML model configuration", "Monkey patching"],\n      "videoLink": "https://example.com/video/metaclasses"\n    },\n    {\n      "chapterNumber": 5,\n      "chapterTitle": "Descriptor Protocol",\n      "description": "Understanding and implementing the descriptor protocol for managing attribute access and validation.",\n      "duration": "15 minutes",\n      "topicsCovered": ["Understanding descriptors (`__get__`, `__set__`, `__delete__`)", "Property decorators", "Data validation with descriptors", "Non-data descriptors", "Practical examples in model parameter management"],\n      "videoLink": "https://example.com/video/descriptor"\n    },\n    {\n      "chapterNumber": 6,\n      "chapterTitle": "Memory Management & Garbage Collection",\n      "description": "In-depth exploration of Python\'s memory management and garbage collection mechanisms to optimize memory usage in large-scale ML projects.",\n      "duration": "15 minutes",\n      "topicsCovered": ["Python\'s memory model", "Garbage collection algorithms", "Memory profiling tools", "Circular references and weak references", "Techniques for reducing memory footprint"],\n      "videoLink": "https://example.com/video/memory-mgmt"\n    },\n    {\n      "chapterNumber": 7,\n      "chapterTitle": "Advanced NumPy: Broadcasting & Ufuncs",\n      "description": "Deep dive into NumPy\'s broadcasting rules and universal functions (ufuncs) for efficient array manipulation and computation.",\n      "duration": "25 minutes",\n      "topicsCovered": ["Broadcasting rules and applications", "Creating custom ufuncs", "Generalized ufuncs", "Memory views and strides", "Performance optimization with NumPy"],\n      "videoLink": "https://example.com/video/adv-numpy"\n    },\n    {\n      "chapterNumber": 8,\n      "chapterTitle": "Advanced Pandas: Custom Accessors & Performance",\n      "description": "Extending Pandas DataFrames with custom accessors and optimizing performance for large datasets.",\n      "duration": "25 minutes",\n      "topicsCovered": ["Creating custom accessors", "Categorical data types", "Sparse data structures", "Optimizing DataFrame operations", "Out-of-core data processing with Dask"],\n      "videoLink": "https://example.com/video/adv-pandas"\n    },\n    {\n      "chapterNumber": 9,\n      "chapterTitle": "Custom Scikit-learn Transformers & Estimators",\n      "description": "Building custom transformers and estimators in scikit-learn to extend its functionality and tailor it to specific ML problems.",\n      "duration": "25 minutes",\n      "topicsCovered": ["Creating custom transformers (fit, transform)", "Creating custom estimators (fit, predict)", "Integrating custom components into pipelines", "Model validation and testing", "Composing complex pipelines with custom components"],\n      "videoLink": "https://example.com/video/custom-sklearn"\n    },\n    {\n      "chapterNumber": 10,\n      "chapterTitle": "TensorFlow Internals & Custom Layers",\n      "description": "Understanding the inner workings of TensorFlow and building custom layers for advanced deep learning architectures.",\n      "duration": "30 minutes",\n      "topicsCovered": ["TensorFlow graph execution", "Custom layer creation (Keras API)", "Custom loss functions and metrics", "Gradient tape and custom training loops", "TensorBoard integration"],\n      "videoLink": "https://example.com/video/tf-internals"\n    },\n    {\n      "chapterNumber": 11,\n      "chapterTitle": "PyTorch Internals & Custom Autograd Functions",\n      "description": "Understanding the inner workings of PyTorch and building custom autograd functions for advanced deep learning architectures.",\n      "duration": "30 minutes",\n      "topicsCovered": ["PyTorch dynamic graph execution", "Custom autograd function creation", "TorchScript and model deployment", "Custom data loaders and datasets", "Profiling and optimization"],\n      "videoLink": "https://example.com/video/pytorch-internals"\n    },\n    {\n      "chapterNumber": 12,\n      "chapterTitle": "Probabilistic Programming with PyMC3",\n      "description": "Introduction to probabilistic programming with PyMC3 for Bayesian modeling and inference.",\n      "duration": "20 minutes",\n      "topicsCovered": ["Bayesian modeling concepts", "Building models with PyMC3", "Markov Chain Monte Carlo (MCMC) sampling", "Model diagnostics and evaluation", "Hierarchical modeling"],\n      "videoLink": "https://example.com/video/pymc3"\n    },\n    {\n      "chapterNumber": 13,\n      "chapterTitle": "Graph Neural Networks with DGL",\n      "description": "Building and training graph neural networks (GNNs) using the Deep Graph Library (DGL).",\n      "duration": "25 minutes",\n      "topicsCovered": ["Graph data structures and representations", "DGL API overview", "Implementing GNN layers (GraphConv, GAT)", "Node classification and link prediction tasks", "Scalable GNN training techniques"],\n      "videoLink": "https://example.com/video/dgl"\n    },\n    {\n      "chapterNumber": 14,\n      "chapterTitle": "Explainable AI (XAI) with SHAP & LIME",\n      "description": "Techniques for explaining the predictions of machine learning models using SHAP and LIME.",\n      "duration": "20 minutes",\n      "topicsCovered": ["SHAP (SHapley Additive exPlanations) values", "LIME (Local Interpretable Model-agnostic Explanations)", "Global and local explanations", "Visualizing and interpreting explanations", "Ethical considerations"],\n      "videoLink": "https://example.com/video/xai"\n    },\n    {\n      "chapterNumber": 15,\n      "chapterTitle": "MLOps: Model Deployment & Monitoring",\n      "description": "Best practices for deploying, monitoring, and maintaining machine learning models in production.",\n      "duration": "25 minutes",\n      "topicsCovered": ["Model serving frameworks (TensorFlow Serving, TorchServe, FastAPI)", "Containerization with Docker", "Orchestration with Kubernetes", "Model monitoring and alerting", "Continuous integration and continuous deployment (CI/CD)"],\n      "videoLink": "https://example.com/video/mlops"\n    },\n    {\n      "chapterNumber": 16,\n      "chapterTitle": "Federated Learning",\n      "description": "Implementing federated learning for training models on decentralized data while preserving privacy.",\n      "duration": "25 minutes",\n      "topicsCovered": ["Federated learning concepts and algorithms", "Secure aggregation techniques", "Differential privacy for federated learning", "Client selection and communication strategies", "Practical implementations with frameworks like Flower or FedScale"],\n      "videoLink": "https://example.com/video/federated-learning"\n    },\n    {\n      "chapterNumber": 17,\n      "chapterTitle": "Reinforcement Learning",\n      "description": "An introduction to Reinforcement Learning concepts and how to implement them in Python.",\n      "duration": "30 minutes",\n      "topicsCovered": ["Markov Decision Process", "Q-Learning", "Deep Q-Networks (DQN)", "Policy Gradients", "Actor-Critic Methods"],\n      "videoLink": "https://example.com/video/reinforcement"\n    },\n    {\n      "chapterNumber": 18,\n      "chapterTitle": "Time Series Analysis with Advanced Methods",\n      "description": "Advanced techniques for analyzing and forecasting time series data, including state space models and deep learning approaches.",\n      "duration": "25 minutes",\n      "topicsCovered": ["State space models (Kalman filter, Hidden Markov Models)", "Deep learning for time series forecasting (LSTMs, Transformers)", "Causal inference in time series data", "Anomaly detection and change point detection", "Evaluation metrics for time series forecasting"],\n      "videoLink": "https://example.com/video/timeseries-adv"\n    },\n    {\n      "chapterNumber": 19,\n      "chapterTitle": "Generative Adversarial Networks (GANs)",\n      "description": "Building and training Generative Adversarial Networks (GANs) for generating realistic synthetic data.",\n      "duration": "30 minutes",\n      "topicsCovered": ["GAN architectures (DCGAN, WGAN, StyleGAN)", "Training GANs and addressing mode collapse", "Conditional GANs", "Applications of GANs in image generation, data augmentation, and anomaly detection", "Evaluation metrics for GANs"],\n      "videoLink": "https://example.com/video/gans"\n    },\n    {\n      "chapterNumber": 20,\n      "chapterTitle": "Ethical Considerations in Advanced ML",\n      "description": "Addressing ethical considerations in advanced machine learning, including bias, fairness, privacy, and transparency.",\n      "duration": "15 minutes",\n      "topicsCovered": ["Bias detection and mitigation techniques", "Fairness metrics and algorithms", "Privacy-preserving techniques (differential privacy, federated learning)", "Explainable AI (XAI) and interpretability", "Responsible AI development and deployment"],\n      "videoLink": "https://example.com/video/ethics-adv"\n    }\n  ]\n}\n```\n',
        },
      ],
    },
  ],
});
